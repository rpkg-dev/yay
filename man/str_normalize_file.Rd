% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yay-GEN.R
\name{str_normalize_file}
\alias{str_normalize_file}
\title{Apply regular-expression-based text normalization to files}
\usage{
str_normalize_file(
  path,
  rules = yay::regex_text_normalization,
  run_dry = TRUE,
  process_line_by_line = FALSE,
  n_context_chrs = 20L,
  verbose = TRUE
)
}
\arguments{
\item{path}{Paths to the text files. A character vector.}

\item{rules}{A \link[tibble:tibble]{tibble} of regular expression patterns and replacements. It must have the columns \code{pattern} and \code{replacement}. \code{pattern}
can optionally be a list column condensing multiple patterns to the same replacement rule. Patterns are interpreted as regular expressions as described
in \code{\link[stringi:about_search_regex]{stringi::stringi-search-regex()}}. Replacements are interpreted as-is, except that references of the form \verb{\\1}, \verb{\\2}, etc. will be replaced with the
contents of the respective matched group (created in patterns using \verb{()}). Pattern-replacement pairs are processed in the order given, meaning that first
listed pairs are applied before later listed ones.}

\item{run_dry}{Show replacements on the console only, without actually modifying any files. Implies \code{verbose = TRUE}.}

\item{process_line_by_line}{Whether each line in a file should be treated as a separate string or the whole file as one single string. While the latter is
more performant, you probably want the former if you're using \code{"^"} or \code{"$"} in your \code{pattern}s.}

\item{n_context_chrs}{The (maximum) number of characters displayed around the actual \code{string} and its replacement. The number refers to a single side of
\code{string}/replacement, so the total number of context characters is at the maximum \code{2 * n_context_chrs}. Only relevant if \code{verbose = TRUE}.}

\item{verbose}{Whether to display replacements on the console.}
}
\value{
\code{path} invisibly.
}
\description{
Applies a set of regular-expression-based text normalization rules to one or more files. By default, changes are shown on the console only, without actually
modifying any files. Set \code{run_dry = FALSE} to apply the changes.
}
\examples{
# Use POSIX-related file normalization rule(s) included in this package
temp_file <- tempfile()
download.file(url = paste0("https://raw.githubusercontent.com/RcppCore/Rcpp/72f0652b93f196d",
                           "64faab6b108cd02a197510a7b/inst/include/Rcpp/utils/tinyformat.h"),
              destfile = temp_file)

yay::regex_file_normalization \%>\%
  dplyr::filter(category == "posix") \%>\%
  yay::str_normalize_file(path = temp_file)
}
\seealso{
\code{\link{regex_text_normalization}} \code{\link{regex_file_normalization}}

Other string functions:
\code{\link{str_normalize}()},
\code{\link{str_replace_file}()},
\code{\link{str_replace_verbose}()}
}
\concept{string}
