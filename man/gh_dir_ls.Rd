% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yay.gen.R
\name{gh_dir_ls}
\alias{gh_dir_ls}
\title{List files and directories in a GitHub repository}
\usage{
gh_dir_ls(
  path = "/",
  owner,
  name,
  rev = "HEAD",
  recurse = TRUE,
  incl_dirs = TRUE,
  incl_files = TRUE
)
}
\arguments{
\item{path}{Path to a directory, relative to the repository root. A character scalar.}

\item{owner}{Repository owner's GitHub user or organization name. A character scalar.}

\item{name}{Repository name. A character scalar.}

\item{rev}{\href{https://git-scm.com/docs/revisions#_specifying_revisions}{Git revision expression} matching the desired Git tree object, e.g. a branch or tag
name or another symbolic reference like \code{"HEAD@{yesterday}"} or \code{"HEAD~10"}. A character scalar.}

\item{recurse}{Whether or not to recurse into subdirectories of \code{path}.}

\item{incl_dirs}{Whether or not to list directories (and subdirectories if \code{recurse = TRUE}).}

\item{incl_files}{Whether or not to list files (also inside subdirectories if \code{recurse = TRUE}).}
}
\value{
A character vector of paths to the files and subdirectories found under \code{rev:path}, relative to the repository root.
}
\description{
Lists file and directory names found under
\href{https://git-scm.com/docs/revisions#Documentation/revisions.txt-emltrevgtltpathgtemegemHEADREADMEememmasterREADMEem}{\code{rev:path}} in a GitHub repository via
\href{https://docs.github.com/en/graphql/overview/about-the-graphql-api}{GitHub's GraphQL API v4}.
}
\details{
Works for both public and private repositories, for the latter you just need to set up a sufficiently authorized \link[gh:gh_token]{GitHub Personal Access Token (PAT)}.

Note that an empty character vector is returned in case \code{path} is invalid or no file/directory exists underneath \code{path}.
}
\examples{
# you can opt-out from directory recursion
yay::gh_dir_ls(owner = "salim-b",
               name = "pal",
               recurse = FALSE) |>
  pal::cat_lines()

# you can list only files in a directory
yay::gh_dir_ls(path = "tests",
               owner = "salim-b",
               name = "pal",
               incl_dirs = FALSE) |>
  pal::cat_lines()

# or you can list only directories in a directory
yay::gh_dir_ls(path = "tests",
               owner = "salim-b",
               name = "pal",
               incl_files = FALSE) |>
  pal::cat_lines()
}
\seealso{
Other GitHub functions:
\code{\link{gh_text_file}()},
\code{\link{gh_text_files}()}
}
\concept{gh}
