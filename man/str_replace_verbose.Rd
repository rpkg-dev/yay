% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yay-GEN.R
\name{str_replace_verbose}
\alias{str_replace_verbose}
\title{Replace matched patterns in strings \emph{verbosely}}
\usage{
str_replace_verbose(string, pattern, verbose = TRUE, n_context_chrs = 20L)
}
\arguments{
\item{string}{Input vector. Either a character vector, or something
coercible to one.}

\item{pattern}{A named character vector with patterns as names and replacements as values (\code{c(pattern1 = replacement1)}). Patterns are interpreted as
regular expressions as described in \code{\link[stringi:about_search_regex]{stringi::stringi-search-regex()}}. Replacements are interpreted as-is, except that references of the form \verb{\\1}, \verb{\\2},
etc. will be replaced with the contents of the respective matched group (created in patterns using \verb{()}). Pattern-replacement pairs are processed in the
order given, meaning that first listed pairs are applied before later listed ones.}

\item{verbose}{Whether to display replacements on the console.}

\item{n_context_chrs}{The (maximum) number of characters displayed around the actual \code{string} and its replacement. The number refers to a single side of
\code{string}/replacement, so the total number of context characters is at the maximum \code{2 * n_context_chrs}. Only relevant if \code{verbose = TRUE}.}
}
\value{
A character vector.
}
\description{
Applies a series of regular-expression-replacement pairs to one or more strings. All performed replacements are displayed on the console by default
(\code{verbose = TRUE}).
}
\details{
This function provides a subset of \code{\link[stringr:str_replace]{stringr::str_replace_all()}}'s functionality. If you don't need the visual console output, it's recommended to directly
resort to the latter.
}
\examples{
"Make love, not war" \%>\% str_replace_verbose(pattern = c("love" = "hummus",
                                                         "war" = "walls"))

# pattern-replacement pairs are processed one-by-one, so the following gives the same result
"Make love, not war" \%>\% str_replace_verbose(pattern = c("love" = "hummus",
                                                         "hummus, not war" = "hummus, not walls"))

# varying `n_context_chrs` affects console output summarization
input <- c("Tulips are not durable, ",
           "not scarce, ",
           "not programmable, ",
           "not fungible, ",
           "not verifiable, ",
           "not divisible, ",
           "and hard to transfer. ",
           "But tell me more about your analogy...",
           "",
           "-[Naval Ravikant](https://twitter.com/naval/status/939316447318122496)")

pattern <- c("not" = "extremely",
             "hard" = "ridiculously easy",
             "^But.*" = "So... flower power?",
             "(^-).*Naval.*" = "\\\\1\U0001F92A")

yay::str_replace_verbose(string = input,
                         pattern = pattern,
                         n_context_chrs = 5L) \%>\%
  pal::cat_lines()

yay::str_replace_verbose(string = input,
                         pattern = pattern,
                         n_context_chrs = 0L) \%>\%
  pal::cat_lines()
}
\seealso{
Other string functions:
\code{\link{str_normalize_file}()},
\code{\link{str_normalize}()},
\code{\link{str_replace_file}()}
}
\concept{string}
