% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yay.gen.R
\name{gl_file_write}
\alias{gl_file_write}
\title{Write file to GitLab repository}
\usage{
gl_file_write(
  content,
  path,
  id_proj,
  start_branch = gl_branch_default(id_proj = id_proj, base_url = base_url, token = token,
    max_tries = max_tries),
  branch = start_branch,
  from_file = FALSE,
  overwrite = TRUE,
  force = FALSE,
  commit_message = "auto: write file via yay R pkg",
  author_email = NULL,
  author_name = NULL,
  execute_filemode = FALSE,
  last_commit_id = gl_file_meta(path = path, attribute = "last_commit_id", id_proj =
    id_proj, ref = branch, base_url = base_url, token = token, max_tries = max_tries),
  base_url = pal::pkg_config_val("gitlab_base_url"),
  token = pal::pkg_config_val("gitlab_token"),
  max_tries = 3L,
  quiet = FALSE
)
}
\arguments{
\item{content}{File content, as a character scalar for text files, or a \link[=raw]{raw vector} for binary files. Or the path to a local file as a character scalar
if \code{from_file = TRUE}.}

\item{path}{File path, relative to the repository root. A character scalar.}

\item{id_proj}{GitLab project identifier. An integerish number.}

\item{start_branch}{Name of the base branch to create \code{branch} from if it doesn't already exist.}

\item{branch}{Git branch name to upload the file to.}

\item{from_file}{Whether or not \code{content} indicates the path to a local file instead of the actual file content.}

\item{overwrite}{Whether or not to overwrite an already existing file. Unless \code{force = TRUE}, the file is only overwritten if it is not identical to
\code{content}.}

\item{force}{Whether or not to overwrite an already existing file even if it is identical to \code{content}.}

\item{commit_message}{Git commit message.}

\item{author_email}{Git commit author's email address. \code{NULL} means to default to the \code{token} owner.}

\item{author_name}{Git commit author's name. \code{NULL} means to default to the \code{token} owner.}

\item{execute_filemode}{Whether or not to mark the uploaded file as executable,}

\item{last_commit_id}{Last known file commit identifier. If provided (and valid), GitLab won't write to the file if a commit made after \code{last_commit_id} has
modified the file. Intended to avoid concurrency issues (e.g. from CI pipelines). \code{NULL} means to skip the check.}

\item{base_url}{Base URL to the GitLab v4 RESTful API root.}

\item{token}{\href{https://docs.gitlab.com/ee/api/rest/authentication.html}{GitLab access token} used for authentication}

\item{max_tries}{Maximum number of attempts to retry in case of an HTTP error. An integerish scalar.}

\item{quiet}{Whether or not to suppress printing status output from internal processing.}
}
\value{
\code{path}, invisibly.
}
\description{
Uploads a file to a GitLab repository via \href{https://docs.gitlab.com/ee/api/rest/}{GitLab's v4 RESTful API}.
}
\details{
To save up to two additional \code{HEAD} requests, set \code{start_branch} and \code{last_commit_id} explicitly. Setting \code{last_commit_id = NULL} is fine as long as file
writes are part of a controlled, single-user process where concurrency is not a concern.
}
\seealso{
Other gitlabr: 
\code{\link{gl_file_raw}()},
\code{\link{gl_url}()}
}
\concept{gitlabr}
