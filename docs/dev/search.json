[{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://yay.rpkg.dev/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://yay.rpkg.dev/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Salim Brüggemann. Author, maintainer.","code":""},{"path":"https://yay.rpkg.dev/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brüggemann S (2023). yay: Delightful Convenience Functions. https://yay.rpkg.dev, https://gitlab.com/salim_b/r/pkgs/yay.","code":"@Manual{,   title = {yay: Delightful Convenience Functions},   author = {Salim Brüggemann},   year = {2023},   note = {https://yay.rpkg.dev, https://gitlab.com/salim_b/r/pkgs/yay}, }"},{"path":"https://yay.rpkg.dev/dev/index.html","id":"yay-delightful-convenience-functions","dir":"","previous_headings":"","what":"Delightful Convenience Functions","title":"Delightful Convenience Functions","text":"delightful mix convenience functions designed put smile face typical R workflows. arguably low-cohesion package.","code":""},{"path":"https://yay.rpkg.dev/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Delightful Convenience Functions","text":"install latest development version yay, run following R:","code":"if (!(\"remotes\" %in% rownames(installed.packages()))) {   install.packages(pkgs = \"remotes\",                    repos = \"https://cloud.r-project.org/\") }  remotes::install_gitlab(repo = \"salim_b/r/pkgs/yay\")"},{"path":"https://yay.rpkg.dev/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Delightful Convenience Functions","text":"(function) reference found .","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/index.html","id":"r-markdown-format","dir":"","previous_headings":"Development","what":"R Markdown format","title":"Delightful Convenience Functions","text":"package’s source code written R Markdown file format facilitate practices commonly referred literate programming. allows actual code freely mixed explanatory supplementary information expressive Markdown format instead rely # comments . .gen.R suffixed R source code found R/ generated respective R Markdown counterparts Rmd/ using pkgpurl::purl_rmd()1. Always make changes .Rmd files – never .R files – run pkgpurl::purl_rmd() regenerate R source files.","code":""},{"path":"https://yay.rpkg.dev/dev/index.html","id":"coding-style","dir":"","previous_headings":"Development","what":"Coding style","title":"Delightful Convenience Functions","text":"package borrows lot Tidyverse design philosophies. R code adheres principles specified Tidyverse Design Guide wherever possible formatted according Tidyverse Style Guide (TSG) following exceptions: Line width limited 160 characters, double limit proposed TSG (80 characters ridiculously little given today’s high-resolution wide screen monitors). Furthermore, preferred style breaking long lines differs. Instead wrapping directly expression’s opening bracket suggested TSG, prefer two fewer line breaks indent subsequent lines within expression opening bracket: results less vertical horizontal spread code better readability pipes. Usage magrittr’s compound assignment pipe-operator %<>% desirable2. Usage R’s right-hand assignment operator -> allowed3. R source code split several files suggested TSG instead (far possible) kept single file Rmd/yay.Rmd well-structured thanks Markdown support. far possible, deviations TSG plus additional restrictions formally specified lintr configuration file .lintr, lintr can used right away check formatting issues:","code":"# TSG proposes this do_something_very_complicated(   something = \"that\",   requires = many,   arguments = \"some of which may be long\" )  # we prefer this do_something_very_complicated(something = \"that\",                               requires = many,                               arguments = \"some of which may be long\") pkgpurl::lint_rmd()"},{"path":"https://yay.rpkg.dev/dev/reference/deploy_pkgdown_site.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy pkgdown site to local Git folder — deploy_pkgdown_site","title":"Deploy pkgdown site to local Git folder — deploy_pkgdown_site","text":"Copies static pkgdown website files another local Git folder, stages, commits pushes changes. Use pkgdown::build_site() running function order create website files. Use function caution since default – except paths listed never_clean – completely wipes to_path directory!","code":""},{"path":"https://yay.rpkg.dev/dev/reference/deploy_pkgdown_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy pkgdown site to local Git folder — deploy_pkgdown_site","text":"","code":"deploy_pkgdown_site(   pkg_path = \".\",   to_path = NULL,   use_dev_build = NULL,   clean_to_path = TRUE,   never_clean = paths_to_keep,   branch = NULL,   commit_msg = paste0(\"auto-deploy pkgdown site for \", desc::desc_get_field(file =     pkg_path, key = \"Package\")),   quiet = FALSE )"},{"path":"https://yay.rpkg.dev/dev/reference/deploy_pkgdown_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy pkgdown site to local Git folder — deploy_pkgdown_site","text":"pkg_path Path R package pkgdown website files deployed. to_path Path Git (sub)folder pkgdown website files deployed. NULL, R options yay.local_pkgdown_deploy_paths yay.default_local_pkgdown_deploy_parent_path respected. See section Setting to_path via R options details. use_dev_build Whether deploy development build pkgdown website files. NULL, development.mode set pkgdown YAML configuration file pkg_path respected. clean_to_path Whether wipe to_path deploying new website files. Setting TRUE ensures obsolete files left previous deployments. never_clean character vector paths relative to_path preserved wiping to_path (.e. clean_to_path = TRUE). default, includes following files directories: \"netlify.toml\" \"robots.txt\" \"_headers\" \"_redirects\" \".gitignore\" \".gitmodules\" \".gitsigners\" \".htaccess\" \".well-known\" branch name Git branch static website files committed. character scalar NULL. NULL, defaults currently checked branch repository to_path belongs . commit_msg Git commit message used deployment. character scalar. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/deploy_pkgdown_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy pkgdown site to local Git folder — deploy_pkgdown_site","text":"vector paths deployed files/folders, invisibly.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/deploy_pkgdown_site.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deploy pkgdown site to local Git folder — deploy_pkgdown_site","text":"function also registered RStudio add-, allowing RStudio users assign custom shortcut invoke command palette.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/deploy_pkgdown_site.html","id":"setting-to-path-via-r-options","dir":"Reference","previous_headings":"","what":"Setting to_path via R options","title":"Deploy pkgdown site to local Git folder — deploy_pkgdown_site","text":"Instead directly providing valid to_path argument, can also set to_path = NULL provide desired deploy paths package R option yay.local_pkgdown_deploy_paths. value option must named character vector whereas names correspond package names values filesystem paths. example:   default parent path R option yay.default_local_pkgdown_deploy_parent_path used deployment parent directory packages explicitly listed yay.local_pkgdown_deploy_paths. example set   result deploying pkgdown website files hypothetical package named bar_pkg /path//common_pkgdown_repo/bar_pkg. suitable place define options .Rprofile file user's home directory.","code":"options(yay.local_pkgdown_deploy_paths = c(some_pkg    = \"/path/to/common_pkgdown_repo/some_pkg\",                                            another_pkg = \"/path/to/common_pkgdown_repo/another_pkg\",                                            foo_pkg     = \"/path/to/dedicated_foo_pkgdown_repo\")) options(yay.default_local_pkgdown_deploy_parent_path = \"/path/to/common_pkgdown_repo\")"},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/deploy_static_site.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy static website to local Git folder — deploy_static_site","title":"Deploy static website to local Git folder — deploy_static_site","text":"Copies content specific filesystem folder another local Git folder, stages, commits pushes changes. Primarily useful deploy static website (typically output static site generator). Use function caution since default – except paths listed never_clean – completely wipes to_path directory!","code":""},{"path":"https://yay.rpkg.dev/dev/reference/deploy_static_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy static website to local Git folder — deploy_static_site","text":"","code":"deploy_static_site(   from_path,   to_path,   clean_to_path = TRUE,   never_clean = paths_to_keep,   branch = NULL,   commit_msg = \"auto-deploy static website\",   quiet = FALSE )"},{"path":"https://yay.rpkg.dev/dev/reference/deploy_static_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy static website to local Git folder — deploy_static_site","text":"from_path Path directory containing static website files deployed. character scalar. to_path Path Git (sub)folder static website files deployed. character scalar. clean_to_path Whether wipe to_path deploying new website files. Setting TRUE ensures obsolete files left previous deployments. never_clean character vector paths relative to_path preserved wiping to_path (.e. clean_to_path = TRUE). default, includes following files directories: \"netlify.toml\" \"robots.txt\" \"_headers\" \"_redirects\" \".gitignore\" \".gitmodules\" \".gitsigners\" \".htaccess\" \".well-known\" branch name Git branch static website files committed. character scalar NULL. NULL, defaults currently checked branch repository to_path belongs . commit_msg Git commit message used deployment. character scalar. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/deploy_static_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy static website to local Git folder — deploy_static_site","text":"vector paths deployed files/folders, invisibly.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/open_as_tmp_spreadsheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Open as temporary spreadsheet — open_as_tmp_spreadsheet","title":"Open as temporary spreadsheet — open_as_tmp_spreadsheet","text":"Writes R object -- usually tabular data like dataframe tibble -- temporary spreadsheet subsequently opens spreadsheet system's default application using xopen::xopen(). latter usually equivalent double-clicking file file browser.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/open_as_tmp_spreadsheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open as temporary spreadsheet — open_as_tmp_spreadsheet","text":"","code":"open_as_tmp_spreadsheet(x, format = c(\"csv\", \"xlsx\"), ..., quiet = TRUE)"},{"path":"https://yay.rpkg.dev/dev/reference/open_as_tmp_spreadsheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open as temporary spreadsheet — open_as_tmp_spreadsheet","text":"x dataframe tibble, something coercible . format spreadsheet format use. One \"csv\" comma-separated values file written using readr::write_csv(). default. \"xlsx\" Office Open XML file commonly used Microsoft Excel 2007+, written using writexl::write_xlsx(). ... arguments passed readr::write_csv() writexl::write_xlsx(), depending format. quiet Whether echo command open temporary spreadsheet console running .","code":""},{"path":"https://yay.rpkg.dev/dev/reference/open_as_tmp_spreadsheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open as temporary spreadsheet — open_as_tmp_spreadsheet","text":"x invisibly.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/open_as_tmp_spreadsheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open as temporary spreadsheet — open_as_tmp_spreadsheet","text":"","code":"if (FALSE) { yay::open_as_tmp_spreadsheet(mtcars,                              format = \"xslx\")}"},{"path":"https://yay.rpkg.dev/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %<>%, %>%, %$%, %T>%","code":""},{"path":"https://yay.rpkg.dev/dev/reference/regex_file_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression patterns and replacements for file normalization — regex_file_normalization","title":"Regular expression patterns and replacements for file normalization — regex_file_normalization","text":"Regular expression patterns replacements file normalization","code":""},{"path":"https://yay.rpkg.dev/dev/reference/regex_file_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression patterns and replacements for file normalization — regex_file_normalization","text":"","code":"regex_file_normalization"},{"path":"https://yay.rpkg.dev/dev/reference/regex_file_normalization.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression patterns and replacements for file normalization — regex_file_normalization","text":"tibble.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/regex_file_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regular expression patterns and replacements for file normalization — regex_file_normalization","text":"","code":"# unnest the pattern column tidyr::unnest_longer(data = yay::regex_file_normalization,                      col = pattern) #> # A tibble: 3 × 5 #>   id                                     category    purpose                                                                                     pattern repla…¹ #>   <chr>                                  <chr>       <chr>                                                                                       <chr>   <chr>   #> 1 terminating_newline                    posix       \"ensure file ends with the [POSIX-standard newline control character `LF`](https://en.wiki… \"(.)(?… \"\\\\1\\n\" #> 2 go_template_opening_double_brace_space go_template \"ensure there's a space after opening double braces in Go templates\"                        \"\\\\{\\\\… \"{{ \"   #> 3 go_template_closing_double_brace_space go_template \"ensure there's a space before closing double braces in Go templates\"                       \"([^-%… \"\\\\1 }… #> # … with abbreviated variable name ¹​replacement"},{"path":"https://yay.rpkg.dev/dev/reference/regex_text_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression patterns and replacements for text normalization — regex_text_normalization","title":"Regular expression patterns and replacements for text normalization — regex_text_normalization","text":"Regular expression patterns replacements text normalization","code":""},{"path":"https://yay.rpkg.dev/dev/reference/regex_text_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression patterns and replacements for text normalization — regex_text_normalization","text":"","code":"regex_text_normalization"},{"path":"https://yay.rpkg.dev/dev/reference/regex_text_normalization.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression patterns and replacements for text normalization — regex_text_normalization","text":"tibble.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/regex_text_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regular expression patterns and replacements for text normalization — regex_text_normalization","text":"","code":"# unnest the pattern column tidyr::unnest_longer(data = yay::regex_text_normalization,                      col = pattern) #> # A tibble: 9 × 5 #>   id                            category              purpose                                                                                    pattern repla…¹ #>   <chr>                         <chr>                 <chr>                                                                                      <chr>   <chr>   #> 1 uniform_quotation_marks       harmonize_punctuation \"use typewriter double quotes (`\\\"`) as quotation marks\"                                   \"[“”„‟… \"\\\"\"    #> 2 uniform_apostrophes           harmonize_punctuation \"use typewriter single quotes (`'`) as apostrophes\"                                        \"[’‘‚‛… \"'\"     #> 3 no_break_percentages          prettify_punctuation  \"use narrow non-breaking space between numbers and percentage signs\"                       \"\\\\b(\\… \"\\\\1 \\… #> 4 no_break_abbreviations_german prettify_punctuation  \"use narrow non-breaking space between characters of common German abbreviations\"          \"(?i)\\… \"\\\\1 \\… #> 5 no_break_abbreviations_german prettify_punctuation  \"use narrow non-breaking space between characters of common German abbreviations\"          \"(?i)\\… \"\\\\1 \\… #> 6 no_break_abbreviations_german prettify_punctuation  \"use narrow non-breaking space between characters of common German abbreviations\"          \"(?i)\\… \"\\\\1 \\… #> 7 no_break_abbreviations_german prettify_punctuation  \"use narrow non-breaking space between characters of common German abbreviations\"          \"(?i)\\… \"\\\\1 \\… #> 8 no_break_equals_sign          prettify_punctuation  \"use narrow non-breaking space before and after certain assignments and equality comparis… \"(?<= … \" \\\\1 \" #> 9 en_dash_value_ranges          prettify_punctuation  \"use [en dash](https://www.thepunctuationguide.com/en-dash.html) instead of hyphen in val… \"(?<!-… \"\\\\1–\\… #> # … with abbreviated variable name ¹​replacement"},{"path":"https://yay.rpkg.dev/dev/reference/show_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the differences between two data frames/tibbles in tabular diff format — show_diff","title":"Determine the differences between two data frames/tibbles in tabular diff format — show_diff","text":"Compares two data frames/tibbles (two objects coercible tibbles like matrices) offers inspect differences tabular diff format neatly rendered HTML.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/show_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the differences between two data frames/tibbles in tabular diff format — show_diff","text":"","code":"show_diff(   x,   y,   ignore_order = FALSE,   ignore_col_types = FALSE,   ids = NULL,   ask = TRUE,   bypass_rstudio_viewer = FALSE,   verbose = TRUE,   max_diffs = 10L,   diff_text = \"{x_lbl} is different from {y_lbl}\",   ask_text = \"Do you wish to display the changes in tabular diff format?\",   caption = \"{x_lbl} vs. {y_lbl}\",   ... )"},{"path":"https://yay.rpkg.dev/dev/reference/show_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the differences between two data frames/tibbles in tabular diff format — show_diff","text":"x data frame / tibble check changes. y data frame / tibble x checked , .e. reference. ignore_order Whether ignore order columns rows. ignore_col_types Whether distinguish similar column types. Currently, set TRUE, convert factor character integer double comparison. ids character vector column names make primary key, known. NULL, heuristics used find decent key (set decent keys). ask Whether ask interactively resulting difference object opened case x y differ. FALSE, opened right away. relevant run interactively. bypass_rstudio_viewer TRUE, x y actually differ, ask set TRUE, resulting difference object opened system's default web browser instead RStudio's built-viewer. relevant run within RStudio. verbose Whether also output differences detected pal::is_equal_df() console. max_diffs maximum number differences shown console. relevant verbose = TRUE. diff_text text display console case x y differ. passed glue::glue() allowing string interpolation syntax used. character scalar. ask_text text displayed ask = TRUE. Ignored ask = FALSE. character scalar. caption caption rendered difference object. passed glue::glue() allowing string interpolation syntax used. character scalar. ... arguments passed daff::diff_data(), excluding data, data_ref, ids, ordered, columns_to_ignore.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/show_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the differences between two data frames/tibbles in tabular diff format — show_diff","text":"difference object, invisibly. rendered later using daff::render_diff(), example.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/show_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the differences between two data frames/tibbles in tabular diff format — show_diff","text":"function basically convenience wrapper combining pal::is_equal_df(), daff::diff_data() daff::render_diff(). run non-interactively ask = FALSE, differences shown right away, otherwise user asked console. Note tabular diff format, changes column content x y visible, meaning following properties changes therein displayed: column types (e.g. integer vs. double) row names attributes","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/show_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the differences between two data frames/tibbles in tabular diff format — show_diff","text":"","code":"if (FALSE) { library(magrittr)  mtcars %>%   dplyr::mutate(dplyr::across(c(cyl, gear),                               ~ dplyr::if_else(. > 4, . * 2, .))) %>%   yay::show_diff(mtcars)}"},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply regular-expression-based text normalization to strings — str_normalize","title":"Apply regular-expression-based text normalization to strings — str_normalize","text":"Applies set regular-expression-based text normalization rules one strings. performed replacements displayed console default (verbose = TRUE).","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply regular-expression-based text normalization to strings — str_normalize","text":"","code":"str_normalize(   string,   rules = yay::regex_text_normalization,   n_context_chrs = 20L,   verbose = TRUE )"},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply regular-expression-based text normalization to strings — str_normalize","text":"string Input vector. Either character vector, something coercible one. rules tibble regular expression patterns replacements. must columns pattern replacement. pattern can optionally list column condensing multiple patterns replacement rule. Patterns interpreted regular expressions described stringi::stringi-search-regex(). Replacements interpreted -, except references form \\1, \\2, etc. replaced contents respective matched group (created patterns using ()). Pattern-replacement pairs processed order given, meaning first listed pairs applied later listed ones. n_context_chrs (maximum) number characters displayed around actual string replacement. number refers single side string/replacement, total number context characters maximum 2 * n_context_chrs. relevant verbose = TRUE. verbose Whether display replacements console.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply regular-expression-based text normalization to strings — str_normalize","text":"path invisibly.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply regular-expression-based text normalization to strings — str_normalize","text":"","code":"\"This kind of “text normalization” is e.g. useful to apply before feeding stuff to ‘Pandoc’\" |>   yay::str_normalize() #> 1× - This kind of “text normalization” … #>    + This kind of \"text normalization” … #> 1× - … “text normalization” is e.g. useful to a… #>    + … “text normalization\" is e.g. useful to a… #> 1× - …ing stuff to ‘Pandoc’ #>    + …ing stuff to ‘Pandoc' #> 1× - …re feeding stuff to ‘Pandoc’ #>    + …re feeding stuff to 'Pandoc’ #> [1] \"This kind of \\\"text normalization\\\" is e.g. useful to apply before feeding stuff to 'Pandoc'\""},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply regular-expression-based text normalization to files — str_normalize_file","title":"Apply regular-expression-based text normalization to files — str_normalize_file","text":"Applies set regular-expression-based text normalization rules one files. default, changes shown console , without actually modifying files. Set run_dry = FALSE apply changes.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply regular-expression-based text normalization to files — str_normalize_file","text":"","code":"str_normalize_file(   path,   rules = yay::regex_text_normalization,   run_dry = TRUE,   process_line_by_line = FALSE,   n_context_chrs = 20L,   verbose = TRUE )"},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply regular-expression-based text normalization to files — str_normalize_file","text":"path Paths text files. character vector. rules tibble regular expression patterns replacements. must columns pattern replacement. pattern can optionally list column condensing multiple patterns replacement rule. Patterns interpreted regular expressions described stringi::stringi-search-regex(). Replacements interpreted -, except references form \\1, \\2, etc. replaced contents respective matched group (created patterns using ()). Pattern-replacement pairs processed order given, meaning first listed pairs applied later listed ones. run_dry Whether show replacements console , without actually modifying files. Implies verbose = TRUE. process_line_by_line Whether line file treated separate string whole file one single string. latter performant, probably want former using \"^\" \"$\" patterns. n_context_chrs (maximum) number characters displayed around actual string replacement. number refers single side string/replacement, total number context characters maximum 2 * n_context_chrs. relevant verbose = TRUE. verbose Whether display replacements console.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply regular-expression-based text normalization to files — str_normalize_file","text":"path invisibly.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/str_normalize_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply regular-expression-based text normalization to files — str_normalize_file","text":"","code":"# Use POSIX-related file normalization rule(s) included in this package temp_file <- tempfile() download.file(url = paste0(\"https://raw.githubusercontent.com/RcppCore/Rcpp/72f0652b93f196d\",                            \"64faab6b108cd02a197510a7b/inst/include/Rcpp/utils/tinyformat.h\"),               destfile = temp_file,               quiet = TRUE,               mode = \"wb\")  yay::regex_file_normalization |>   dplyr::filter(category == \"posix\") |>   yay::str_normalize_file(path = temp_file) #> ℹ Running in dry mode. Set `run_dry = FALSE` to actually modify any files. #> ℹ Processing file ../../../../../../../../../../../tmp/Rtmp0YxLKq/file1cb2edaf9e2c2… #> 1× - …TINYFORMAT_H_INCLUDED #>    + …TINYFORMAT_H_INCLUDE\\1\\n #> ✔ Processing file ../../../../../../../../../../../tmp/Rtmp0YxLKq/file1cb2edaf9e2c2… done [62ms] #>"},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace matched patterns in text files — str_replace_file","title":"Replace matched patterns in text files — str_replace_file","text":"Applies pattern-based string replacements one files. Expects series regular-expression-replacement pairs applied one--one given order. default, performed replacements displayed console (verbose = TRUE) without actually changing file content (run_dry = TRUE).","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace matched patterns in text files — str_replace_file","text":"","code":"str_replace_file(   path,   pattern,   process_line_by_line = FALSE,   eol = c(\"LF\", \"CRLF\", \"CR\", \"LFCR\"),   verbose = TRUE,   n_context_chrs = 20L,   show_rel_path = TRUE,   run_dry = TRUE )"},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace matched patterns in text files — str_replace_file","text":"path Paths text files. character vector. pattern named character vector patterns names replacements values (c(pattern1 = replacement1)). Patterns interpreted regular expressions described stringi::stringi-search-regex(). Replacements interpreted -, except references form \\1, \\2, etc. replaced contents respective matched group (created patterns using ()). Pattern-replacement pairs processed order given, meaning first listed pairs applied later listed ones. process_line_by_line Whether line file treated separate string whole file one single string. latter performant, probably want former using \"^\" \"$\" patterns. eol End line (EOL) control character sequence. relevant process_line_by_line = TRUE. One \"LF\" line feed (LF) character (\"\\n\"). standard Unix Unix-like systems (Linux, macOS, *BSD, etc.) default. \"CRLF\" carriage return + line feed (CR+LF) character sequence (\"\\r\\n\"). standard Microsoft Windows, DOS systems. \"CR\" carriage return (CR) character (\"\\r\"). standard classic Mac OS antiquated systems. \"LFCR\" line feed + carriage return (LF+CR) character sequence (\"\\n\\r\"). standard RISC OS exotic systems. verbose Whether display replacements console. n_context_chrs (maximum) number characters displayed around actual string replacement. number refers single side string/replacement, total number context characters maximum 2 * n_context_chrs. relevant verbose = TRUE. show_rel_path Whether display file paths relative current working directory. FALSE, absolute paths displayed. relevant verbose = TRUE. run_dry Whether show replacements console , without actually modifying files. Implies verbose = TRUE.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace matched patterns in text files — str_replace_file","text":"path invisibly.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace matched patterns in text files — str_replace_file","text":"Note process_line_by_line requires line ending standard (EOL) input files correctly set via eol. always defaults \"LF\" (Unix standard) since something reliably detected without complex heuristics (even unambiguously edge cases). Simply deriving default depending host OS (.. \"LF\" Unix systems like Linux macOS \"CRLF\" Windows) seems like really bad idea regard cross-system collaboration (files shared via Git etc.), thus refrained . text files assumed UTF-8 character encoding, encodings supported.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace matched patterns in strings verbosely — str_replace_verbose","title":"Replace matched patterns in strings verbosely — str_replace_verbose","text":"Applies series regular-expression-replacement pairs one strings. performed replacements displayed console default (verbose = TRUE).","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace matched patterns in strings verbosely — str_replace_verbose","text":"","code":"str_replace_verbose(string, pattern, verbose = TRUE, n_context_chrs = 20L)"},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_verbose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace matched patterns in strings verbosely — str_replace_verbose","text":"string Input vector. Either character vector, something coercible one. pattern named character vector patterns names replacements values (c(pattern1 = replacement1)). Patterns interpreted regular expressions described stringi::stringi-search-regex(). Replacements interpreted -, except references form \\1, \\2, etc. replaced contents respective matched group (created patterns using ()). Pattern-replacement pairs processed order given, meaning first listed pairs applied later listed ones. verbose Whether display replacements console. n_context_chrs (maximum) number characters displayed around actual string replacement. number refers single side string/replacement, total number context characters maximum 2 * n_context_chrs. relevant verbose = TRUE.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace matched patterns in strings verbosely — str_replace_verbose","text":"character vector.","code":""},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_verbose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace matched patterns in strings verbosely — str_replace_verbose","text":"function provides subset stringr::str_replace_all()'s functionality. need visual console output, recommended directly resort latter.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/str_replace_verbose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace matched patterns in strings verbosely — str_replace_verbose","text":"","code":"\"Make love, not war\" |>   yay::str_replace_verbose(pattern = c(\"love\" = \"hummus\",                                        \"war\" = \"walls\")) #> 1× - Make love, not war #>    + Make hummus, not war #> 1× - Make hummus, not war #>    + Make hummus, not walls #> [1] \"Make hummus, not walls\"  # pattern-replacement pairs are processed one-by-one, so the following gives the same result \"Make love, not war\" |>   yay::str_replace_verbose(pattern = c(\"love\" = \"hummus\",                                        \"hummus, not war\" = \"hummus, not walls\")) #> 1× - Make love, not war #>    + Make hummus, not war #> 1× - Make hummus, not war #>    + Make hummus, not walls #> [1] \"Make hummus, not walls\"  # varying `n_context_chrs` affects console output summarization input <- c(\"Tulips are not durable, \",            \"not scarce, \",            \"not programmable, \",            \"not fungible, \",            \"not verifiable, \",            \"not divisible, \",            \"and hard to transfer. \",            \"But tell me more about your analogy...\",            \"\",            \"-[Naval Ravikant](https://twitter.com/naval/status/939316447318122496)\")  pattern <- c(\"not\" = \"extremely\",              \"hard\" = \"ridiculously easy\",              \"^But.*\" = \"So... flower power?\",              \"(^-).*Naval.*\" = \"\\\\1\\U0001F92A\")  yay::str_replace_verbose(string = input,                          pattern = pattern,                          n_context_chrs = 5L) |>   pal::cat_lines() #> 1× - not divi… #>    + extremely divi… #> 1× - not fung… #>    + extremely fung… #> 1× - not prog… #>    + extremely prog… #> 1× - not scar… #>    + extremely scar… #> 1× - not veri… #>    + extremely veri… #> 1× - … are not dura… #>    + … are extremely dura… #> 1× - and hard to t… #>    + and ridiculously easy to t… #> 1× - But tell me more about your analogy... #>    + So... flower power? #> 1× - -[Naval Ravikant](https://twitter.com/naval/status/939316447318122496) #>    + \\1🤪 #> Tulips are extremely durable,  #> extremely scarce,  #> extremely programmable,  #> extremely fungible,  #> extremely verifiable,  #> extremely divisible,  #> and ridiculously easy to transfer.  #> So... flower power? #>  #> -🤪  yay::str_replace_verbose(string = input,                          pattern = pattern,                          n_context_chrs = 0L) |>   pal::cat_lines() #> 5× - not… #>    + extremely… #> 1× - …not… #>    + …extremely… #> 1× - …hard… #>    + …ridiculously easy… #> 1× - But tell me more about your analogy... #>    + So... flower power? #> 1× - -[Naval Ravikant](https://twitter.com/naval/status/939316447318122496) #>    + \\1🤪 #> Tulips are extremely durable,  #> extremely scarce,  #> extremely programmable,  #> extremely fungible,  #> extremely verifiable,  #> extremely divisible,  #> and ridiculously easy to transfer.  #> So... flower power? #>  #> -🤪"},{"path":"https://yay.rpkg.dev/dev/reference/yay-package.html","id":null,"dir":"Reference","previous_headings":"","what":"yay: Delightful Convenience Functions — yay-package","title":"yay: Delightful Convenience Functions — yay-package","text":"delightful mix convenience functions designed put smile face typical R workflows.","code":""},{"path":[]},{"path":"https://yay.rpkg.dev/dev/reference/yay-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"yay: Delightful Convenience Functions — yay-package","text":"Maintainer: Salim Brüggemann salim-b@pm.(ORCID)","code":""}]
